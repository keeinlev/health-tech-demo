"""
Django settings for health project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import mimetypes
import environ
from signalwire.rest import Client as signalwire_client
import urllib.parse as up
from django.core.exceptions import ImproperlyConfigured

env = environ.Env()

environ.Env.read_env()

mimetypes.add_type("text/css", ".css", True)
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'multiselectfield',
    'home',
    'book',
    'doctordashboard',
    'accounts',
    'scheduledreminders',
    'appointment',
    'storages',
    'graph',
    'patientdashboard',
    'customstorage',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"
SESSION_COOKIE_AGE = 900
SESSION_SAVE_EVERY_REQUEST = True

ROOT_URLCONF = 'health.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'templates', 'health/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'health.wsgi.application'

AUTH_USER_MODEL = 'accounts.User'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# STATIC_URL = '/static/'

DISABLE_COLLECTSTATIC = False

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'health/static'),
]

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATIC_LOCATION = 'static'

MEDIA_LOCATION = 'media'

LOGIN_REDIRECT_URL = 'login_redir'

LOGOUT_REDIRECT_URL = 'index'

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = '587'

try:
    EMAIL_HOST_USER = env('EMAIL_USER')
except ImproperlyConfigured:
    EMAIL_HOST_USER = None

try:
    EMAIL_HOST_PASSWORD = env('EMAIL_PASS')
except ImproperlyConfigured:
    EMAIL_HOST_PASSWORD = None

EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

try:
    SIGNALWIRE_PROJECT = env('SIGNALWIRE_PROJECT')
except ImproperlyConfigured:
    SIGNALWIRE_PROJECT = None

try:
    SIGNALWIRE_TOKEN = env('SIGNALWIRE_TOKEN')
    SIGNALWIRE_CLIENT = signalwire_client(SIGNALWIRE_PROJECT, SIGNALWIRE_TOKEN, signalwire_space_url = env('SIGNALWIRE_SPACE_URL'))
except ImproperlyConfigured:
    SIGNALWIRE_TOKEN = None
    SIGNALWIRE_CLIENT = signalwire_client('', '', signalwire_space_url = '')
try:
    SIGNALWIRE_NUMBER = env('SIGNALWIRE_PHONE_NUMBER')
except ImproperlyConfigured:
    SIGNALWIRE_NUMBER = ''

#CA_CARRIERS_LIST = ['@txt.bellmobility.ca','@txt.bell.ca','@fido.ca','@pcs.rogers.com','@msg.telus.com',
#'@vmobile.ca','@msg.koodomobile.com','@sms.sasktel.com','@txt.freedommobile.ca','@mobiletxt.ca']

#CA_CARRIERS_LIST = ['@txt.bell.ca','@pcs.rogers.com','@msg.telus.com','@msg.koodomobile.com','@sms.sasktel.com','@txt.freedommobile.ca']

try:
    SMS_CARRIER = env('SMS_CARRIER_DOMAIN')
except ImproperlyConfigured:
    SMS_CARRIER = None

try:
    MS_TEAMS_MEETING_URL_1 = env('MS_TEAMS_TEMP_LINK_1')
except ImproperlyConfigured:
    MS_TEAMS_MEETING_URL_1 = ''
try:
    MS_TEAMS_MEETING_URL_2 = env('MS_TEAMS_TEMP_LINK_2')
except ImproperlyConfigured:
    MS_TEAMS_MEETING_URL_2 = ''
try:
    MS_TEAMS_MEETING_ID_LENGTH = int(env('MS_TEAMS_MEETING_ID_LENGTH'))
except ImproperlyConfigured:
    MS_TEAMS_MEETING_ID_LENGTH = 0

try:
    GOOGLE_MAPS_API_KEY = env('GOOGLE_MAPS_API_KEY')
except ImproperlyConfigured:
    GOOGLE_MAPS_API_KEY = ''

try:
    DJANGO_DEVELOPMENT = env('DJANGO_DEVELOPMENT')
except ImproperlyConfigured:
    DJANGO_DEVELOPMENT = False

try:
    DJANGO_EXT_STORAGE = env('DJANGO_EXT_STORAGE')
except ImproperlyConfigured:
    DJANGO_EXT_STORAGE = True

if DJANGO_DEVELOPMENT == 'True':
    from .development import *
    from .development_db_settings import *
    if DJANGO_EXT_STORAGE == 'True':
        from .production_storage_settings import *
    else:
        from .development_storage_settings import *
else:
    from .production import *
    from .production_db_settings import *
    from .production_storage_settings import *